// Minified and Optimized Contact Form Handler - contact-form.min.js
class ContactFormHandler{
constructor(t={}){
const e=window.EMAILJS_CONFIG||{};
this.config={serviceId:t.serviceId||e.serviceId||'YOUR_EMAILJS_SERVICE_ID',templateId:t.templateId||e.templateId||'YOUR_EMAILJS_TEMPLATE_ID',publicKey:t.publicKey||e.publicKey||'YOUR_EMAILJS_PUBLIC_KEY',maxSubmissions:3,timeWindow:3e5,storageKey:'contact_form_submissions'};
this.form=null;this.submitButton=null;this.messageContainer=null;this.isSubmitting=false;this.init();}

init(){
document.readyState==='loading'?document.addEventListener('DOMContentLoaded',()=>this.setupForm()):this.setupForm();}

setupForm(){
this.form=document.querySelector('.contact-form');
if(!this.form)return console.warn('Contact form not found');
this.submitButton=this.form.querySelector('button[type="submit"]');
this.createMessageContainer();this.bindEvents();this.setupValidation();
console.log('Contact form initialized');}

createMessageContainer(){
this.messageContainer=document.createElement('div');
this.messageContainer.className='form-message';
this.messageContainer.style.cssText='margin-top:1rem;padding:0.75rem 1rem;border-radius:0.375rem;font-size:0.875rem;display:none';
this.submitButton.parentNode.insertBefore(this.messageContainer,this.submitButton.nextSibling);}

bindEvents(){
this.form.addEventListener('submit',e=>this.handleSubmit(e));
this.form.querySelectorAll('input,textarea').forEach(t=>{
t.addEventListener('blur',()=>this.validateField(t));
t.addEventListener('input',()=>this.clearFieldError(t));});}

setupValidation(){
if(document.querySelector('#contact-form-styles'))return;
const t=document.createElement('style');
t.id='contact-form-styles';
t.textContent='.form-control.invalid{border-color:#ef4444!important;box-shadow:0 0 0 3px rgba(239,68,68,0.1)!important}.form-control.valid{border-color:#10b981!important;box-shadow:0 0 0 3px rgba(16,185,129,0.1)!important}.field-error{color:#ef4444;font-size:0.75rem;margin-top:0.25rem;display:block}.form-message.success{background-color:#dcfce7;border:1px solid #22c55e;color:#15803d;display:block}.form-message.error{background-color:#fef2f2;border:1px solid #ef4444;color:#dc2626;display:block}.form-message.info{background-color:#dbeafe;border:1px solid #3b82f6;color:#1d4ed8;display:block}.btn-loading{position:relative;color:transparent!important}.btn-loading::after{content:"";position:absolute;width:16px;height:16px;margin:auto;border:2px solid transparent;border-top-color:#ffffff;border-radius:50%;animation:loading-spinner 1s ease infinite;top:0;left:0;bottom:0;right:0}@keyframes loading-spinner{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}';
document.head.appendChild(t);}

async handleSubmit(t){
if(t.preventDefault(),this.isSubmitting)return;
if(!this.checkRateLimit())return this.showMessage('You have reached the submission limit. Please try again later.','error');
if(!this.validateForm())return this.showMessage('Please fix the errors below and try again.','error');
this.setLoadingState(true);
try{
await this.sendEmail(this.getFormData());this.handleSubmissionSuccess();
}catch(t){console.error('Form submission error:',t);this.handleSubmissionError(t);}
finally{this.setLoadingState(false);}}

checkRateLimit(){
const t=Date.now(),e=this.getStoredSubmissions().filter(e=>t-e<this.config.timeWindow);
return e.length<this.config.maxSubmissions?(e.push(t),localStorage.setItem(this.config.storageKey,JSON.stringify(e)),true):false;}

getStoredSubmissions(){
try{
const t=localStorage.getItem(this.config.storageKey);
return t?JSON.parse(t):[];
}catch(t){return console.error('Error reading stored submissions:',t),[];}}

validateForm(){
let t=true;
return this.form.querySelectorAll('input,textarea').forEach(e=>{this.validateField(e)||(t=false);}),t;}

validateField(t){
const e=t.value.trim(),s=t.name||t.placeholder?.toLowerCase()||'field';
let i=true,a='';
if(this.clearFieldError(t),t.hasAttribute('required')&&!e&&(i=false,a=`${s} is required.`),'email'===t.type&&e&&!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)&&(i=false,a='Please enter a valid email address.'),s.toLowerCase().includes('name')&&e&&!/^[a-zA-Z\s'-]+$/.test(e)&&(i=false,a='Name should only contain letters, spaces, hyphens, and apostrophes.'),'TEXTAREA'===t.tagName&&e&&(e.length<10?(i=false,a='Message should be at least 10 characters long.'):e.length>1000&&(i=false,a='Message should be less than 1000 characters.')),i)t.classList.remove('invalid'),t.classList.add('valid');else{t.classList.remove('valid'),t.classList.add('invalid'),this.showFieldError(t,a);}return i;}

clearFieldError(t){
const e=t.parentNode.querySelector('.field-error');e&&e.remove();t.classList.remove('invalid');}

showFieldError(t,e){
const s=document.createElement('span');
s.className='field-error';s.textContent=e;t.parentNode.appendChild(s);}

getFormData(){
const t={};
return this.form.querySelectorAll('input,textarea').forEach(e=>{
const s=e.name||e.placeholder?.toLowerCase().replace(/\s+/g,'_')||'field';
t[s]=e.value.trim();
}),{from_name:t.your_name||t.name||'',from_email:t.your_email||t.email||'',subject:t.subject||'',message:t.your_message||t.message||'',to_name:'Portfolio Owner'};}

async sendEmail(t){
if('undefined'==typeof emailjs)throw new Error('EmailJS library not loaded. Please include EmailJS script in your HTML.');
if('YOUR_EMAILJS_SERVICE_ID'===this.config.serviceId||'YOUR_EMAILJS_TEMPLATE_ID'===this.config.templateId||'YOUR_EMAILJS_PUBLIC_KEY'===this.config.publicKey)throw new Error('EmailJS configuration not set. Please update the configuration with your actual EmailJS credentials.');
try{
const e=await emailjs.send(this.config.serviceId,this.config.templateId,t,this.config.publicKey);
if(200!==e.status)throw new Error(`EmailJS returned status ${e.status}: ${e.text}`);
return e;
}catch(t){
if(400===t.status)throw new Error('Bad request. Please check your EmailJS configuration.');
if(401===t.status)throw new Error('Unauthorized. Please check your EmailJS public key.');
if(403===t.status)throw new Error('Forbidden. Please check your EmailJS service configuration.');
if(404===t.status)throw new Error('Not found. Please check your EmailJS service and template IDs.');
throw t;}}

handleSubmissionSuccess(){
this.showMessage('✅ Thank you for your message! I will get back to you as soon as possible.','success');
this.form.reset();this.clearAllFieldStates();
document.dispatchEvent(new CustomEvent('contactFormSuccess'));}

handleSubmissionError(t){
let e='❌ Sorry, there was an error sending your message. Please try again later.';
t.message.includes('configuration')?e='⚙️ The contact form is not properly configured. Please contact the site owner.':t.message.includes('EmailJS library')&&(e='📧 Email service is temporarily unavailable. Please try again later.');
this.showMessage(e,'error');
document.dispatchEvent(new CustomEvent('contactFormError',{detail:{error:t.message}}));}

setLoadingState(t){
this.isSubmitting=t;
if(t)this.submitButton.disabled=true,this.submitButton.classList.add('btn-loading'),this.submitButton.setAttribute('data-original-text',this.submitButton.innerHTML);
else{this.submitButton.disabled=false;this.submitButton.classList.remove('btn-loading');
const e=this.submitButton.getAttribute('data-original-text');
e&&(this.submitButton.innerHTML=e);}}

showMessage(t,e='info'){
this.messageContainer.className=`form-message ${e}`;
this.messageContainer.innerHTML=t;this.messageContainer.style.display='block';
this.messageContainer.scrollIntoView({behavior:'smooth',block:'nearest'});
'success'===e&&setTimeout(()=>this.hideMessage(),5000);}

hideMessage(){this.messageContainer.style.display='none';}

clearAllFieldStates(){
this.form.querySelectorAll('input,textarea').forEach(t=>{
t.classList.remove('valid','invalid');this.clearFieldError(t);});}

updateConfig(t){this.config={...this.config,...t};}
}

const contactFormHandler=new ContactFormHandler;
'undefined'!=typeof module&&module.exports?module.exports=ContactFormHandler:'undefined'!=typeof window&&(window.ContactFormHandler=ContactFormHandler);